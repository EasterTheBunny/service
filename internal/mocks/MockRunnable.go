// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRunnable is an autogenerated mock type for the Runnable type
type MockRunnable struct {
	mock.Mock
}

type MockRunnable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunnable) EXPECT() *MockRunnable_Expecter {
	return &MockRunnable_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockRunnable) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunnable_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRunnable_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRunnable_Expecter) Close() *MockRunnable_Close_Call {
	return &MockRunnable_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRunnable_Close_Call) Run(run func()) *MockRunnable_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunnable_Close_Call) Return(_a0 error) *MockRunnable_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunnable_Close_Call) RunAndReturn(run func() error) *MockRunnable_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: _a0
func (_m *MockRunnable) Shutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunnable_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockRunnable_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockRunnable_Expecter) Shutdown(_a0 interface{}) *MockRunnable_Shutdown_Call {
	return &MockRunnable_Shutdown_Call{Call: _e.mock.On("Shutdown", _a0)}
}

func (_c *MockRunnable_Shutdown_Call) Run(run func(_a0 context.Context)) *MockRunnable_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRunnable_Shutdown_Call) Return(_a0 error) *MockRunnable_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunnable_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockRunnable_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockRunnable) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunnable_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockRunnable_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockRunnable_Expecter) Start() *MockRunnable_Start_Call {
	return &MockRunnable_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockRunnable_Start_Call) Run(run func()) *MockRunnable_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRunnable_Start_Call) Return(_a0 error) *MockRunnable_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunnable_Start_Call) RunAndReturn(run func() error) *MockRunnable_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunnable creates a new instance of MockRunnable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunnable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunnable {
	mock := &MockRunnable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
